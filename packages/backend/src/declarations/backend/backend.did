type VitalSigns = 
 record {
   bloodPressureDiastolic: opt nat;
   bloodPressureSystolic: opt nat;
   heartRate: opt nat;
   height: opt float64;
   oxygenSaturation: opt nat;
   recordedAt: int;
   recordedBy: opt UserId;
   temperature: opt float64;
   weight: opt float64;
 };
type UserId = text;
type SystemStats = 
 record {
   completedQueries: nat;
   pendingQueries: nat;
   totalDoctors: nat;
   totalPatients: nat;
   totalQueries: nat;
 };
type SystemPerformanceMetrics = 
 record {
   activeUsers: nat;
   apiResponseTime: float64;
   averageQueryProcessingTime: float64;
   databaseResponseTime: float64;
   errorRate: float64;
   peakConcurrentUsers: nat;
   systemUptime: float64;
 };
type SearchResult = 
 record {
   hasMore: bool;
   offset: nat;
   results: vec QueryData;
   searchQuery: SearchCriteria;
   totalCount: nat;
 };
type SearchCriteria = 
 record {
   category: opt QueryCategory;
   dateFrom: opt int;
   dateTo: opt int;
   department: opt text;
   doctorId: opt DoctorId;
   limit: opt nat;
   offset: opt nat;
   patientId: opt PatientId;
   priority: opt QueryPriority;
   searchQuery: opt text;
   specialty: opt DoctorSpecialty;
   status: opt QueryStatus;
 };
type Result_1 = 
 variant {
   err: text;
   ok: QueryId;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type QueryStatus = 
 variant {
   assigned;
   awaiting_patient_response;
   closed;
   escalated;
   in_review;
   pending;
   resolved;
   submitted;
 };
type QueryResponse = 
 record {
   attachments: vec Attachment;
   id: text;
   isOfficial: bool;
   readByPatient: bool;
   readTimestamp: opt int;
   responderId: UserId;
   responseText: text;
   timestamp: int;
 };
type QueryPriority = 
 variant {
   emergency;
   high;
   low;
   normal;
   urgent;
 };
type QueryId = text;
type QueryData = 
 record {
   aiAnalysis: opt AIAnalysis;
   aiDraftResponse: opt text;
   assignedAt: opt int;
   assignedDoctorId: opt DoctorId;
   attachments: vec Attachment;
   auditTrail: vec text;
   category: QueryCategory;
   createdAt: int;
   dataClassification: text;
   departmentId: opt text;
   description: text;
   escalationLevel: nat;
   followUpDate: opt int;
   followUpRequired: bool;
   hipaaCompliant: bool;
   id: QueryId;
   internalNotes: vec QueryResponse;
   patientId: PatientId;
   patientMessages: vec QueryResponse;
   patientSatisfactionRating: opt nat;
   priority: QueryPriority;
   relatedQueryIds: vec QueryId;
   requiresHumanReview: bool;
   resolutionComplexity: opt text;
   resolvedAt: opt int;
   responseTimeMinutes: opt nat;
   responses: vec QueryResponse;
   status: QueryStatus;
   title: text;
   updatedAt: int;
 };
type QueryCategory = 
 variant {
   appointment_request;
   emergency_consultation;
   follow_up;
   general_inquiry;
   medication_question;
   other: text;
   prescription_refill;
   second_opinion;
   symptom_assessment;
   test_results;
 };
type PlatformStats = 
 record {
   activeDoctors: nat;
   activePatients: nat;
   auditCompletionRate: float64;
   averageQueryResolutionTime: float64;
   dataAccuracy: float64;
   dataBreaches: nat;
   doctorPerformanceAverage: float64;
   doctorsBySpecialty: vec record {
                             DoctorSpecialty;
                             nat;
                           };
   doctorsOnline: nat;
   emergencyQueries: nat;
   healthcareMetrics: HealthcareMetrics;
   hipaaCompliantQueries: nat;
   inReviewQueries: nat;
   lastUpdated: int;
   newPatientsThisMonth: nat;
   patientSatisfactionAverage: float64;
   patientsByCondition: vec record {
                              text;
                              nat;
                            };
   peakUsageHours: vec nat;
   pendingQueries: nat;
   queriesByDepartment: vec record {
                              text;
                              nat;
                            };
   queriesLast24Hours: nat;
   queriesLastMonth: nat;
   queriesLastWeek: nat;
   reportingPeriod: text;
   resolvedQueries: nat;
   securityIncidents: nat;
   systemPerformance: SystemPerformanceMetrics;
   systemReliability: float64;
   totalDoctors: nat;
   totalPatients: nat;
   totalQueries: nat;
 };
type PatientId = text;
type PatientData = 
 record {
   address: text;
   assignedDoctorIds: vec DoctorId;
   bloodType: BloodType;
   city: text;
   communicationPreferences:
    record {
      email: bool;
      phone: bool;
      portal: bool;
      sms: bool;
    };
   consentToTreatment: bool;
   country: text;
   createdAt: int;
   currentVitals: opt VitalSigns;
   dataProcessingConsent: bool;
   dateOfBirth: text;
   email: text;
   emergencyContact: EmergencyContact;
   firstName: text;
   gender: Gender;
   hipaaAcknowledged: bool;
   id: PatientId;
   insuranceInfo: opt InsuranceInfo;
   isActive: bool;
   lastName: text;
   lastVisit: opt int;
   medicalHistory: MedicalHistory;
   medicalRecordNumber: text;
   phoneNumber: text;
   primaryDoctorId: opt DoctorId;
   state: text;
   updatedAt: int;
   zipCode: text;
 };
type Patient = 
 record {
   assignedDoctorId: opt DoctorId;
   condition: text;
   email: text;
   id: PatientId;
   isActive: bool;
   name: text;
 };
type MedicalQuery = 
 record {
   aiDraftResponse: opt text;
   createdAt: int;
   description: text;
   doctorId: opt DoctorId;
   id: QueryId;
   patientId: PatientId;
   response: opt text;
   status: QueryStatus;
   title: text;
   updatedAt: int;
 };
type MedicalHistory = 
 record {
   allergies: vec text;
   conditions: vec text;
   familyHistory: vec text;
   lastUpdated: int;
   medications: vec text;
   surgeries: vec text;
 };
type InsuranceInfo = 
 record {
   copayAmount: opt float64;
   deductibleAmount: opt float64;
   effectiveDate: int;
   expirationDate: opt int;
   groupNumber: opt text;
   id: InsuranceId;
   isActive: bool;
   memberId: text;
   policyNumber: text;
   provider: text;
 };
type InsuranceId = text;
type HealthcareMetrics = 
 record {
   averageDoctorResponseTime: float64;
   averagePatientSatisfaction: float64;
   criticalQueryResponse: float64;
   doctorUtilizationRate: float64;
   patientEngagementRate: float64;
   queryResolutionRate: float64;
   specialtyDistribution: vec record {
                                DoctorSpecialty;
                                nat;
                              };
 };
type Gender = 
 variant {
   female;
   male;
   other;
   prefer_not_to_say;
 };
type EmergencyContact = 
 record {
   address: opt text;
   email: opt text;
   name: text;
   phoneNumber: text;
   relationship: text;
 };
type DoctorSpecialty = 
 variant {
   cardiology;
   dermatology;
   emergency_medicine;
   endocrinology;
   gastroenterology;
   general_practice;
   internal_medicine;
   neurology;
   oncology;
   orthopedics;
   other: text;
   pediatrics;
   psychiatry;
   radiology;
   surgery;
 };
type DoctorId = text;
type Doctor = 
 record {
   id: DoctorId;
   name: text;
   specialization: text;
 };
type BloodType = 
 variant {
   AB_negative;
   AB_positive;
   A_negative;
   A_positive;
   B_negative;
   B_positive;
   O_negative;
   O_positive;
   unknown;
 };
type AttachmentType = 
 variant {
   document;
   image;
   lab_result;
   medical_record;
   prescription;
 };
type Attachment = 
 record {
   accessPermissions: vec UserId;
   fileName: text;
   fileSizeBytes: nat;
   fileType: AttachmentType;
   id: text;
   isEncrypted: bool;
   uploadedAt: int;
   uploadedBy: UserId;
 };
type ApiResult_1 = 
 variant {
   err: ApiError;
   ok: QueryId;
 };
type ApiResult = 
 variant {
   err: ApiError;
   ok;
 };
type ApiError = 
 record {
   code: text;
   details: opt text;
   message: text;
   timestamp: int;
 };
type AIAnalysis = 
 record {
   analysisTimestamp: int;
   confidence: float64;
   flaggedSymptoms: vec text;
   modelVersion: text;
   recommendedActions: vec text;
   riskAssessment: text;
   suggestedSpecialty: opt DoctorSpecialty;
 };
service : {
  assignPatientToDoctor: (patientId: PatientId, doctorId: DoctorId) ->
   (Result);
  createEnhancedPatient: (patientData: PatientData) -> (PatientId);
  findPatientByEmail: (email: text) -> (opt Patient) query;
  getAllDoctors: () -> (vec Doctor) query;
  getDoctor: (doctorId: DoctorId) -> (opt Doctor) query;
  getDoctorPatients: (doctorId: DoctorId) -> (vec Patient) query;
  getDoctorQueries: (doctorId: DoctorId) -> (vec MedicalQuery) query;
  getEnhancedPatient: (patientId: PatientId) -> (opt PatientData) query;
  getPatient: (patientId: PatientId) -> (opt Patient) query;
  getPatientQueries: (patientId: PatientId) -> (vec MedicalQuery) query;
  getPatientQueriesEnhanced: (patientId: PatientId, searchCriteria:
   opt SearchCriteria) -> (SearchResult) query;
  getPendingQueries: () -> (vec MedicalQuery) query;
  getPlatformStats: () -> (PlatformStats) query;
  getQuery: (queryId: QueryId) -> (opt MedicalQuery) query;
  getStats: () -> (SystemStats) query;
  getUnassignedPatients: () -> (vec Patient) query;
  healthCheck: () -> (text) query;
  registerDoctor: (name: text, specialization: text) -> (DoctorId);
  registerPatient: (name: text, condition: text, email: text) -> (PatientId);
  respondToQuery: (queryId: QueryId, doctorId: DoctorId, response: text) ->
   (Result);
  submitQuery: (patientId: PatientId, title: text, description: text) ->
   (Result_1);
  submitQueryEnhanced: (queryData: QueryData) -> (ApiResult_1);
  takeQuery: (queryId: QueryId, doctorId: DoctorId) -> (Result);
  unassignPatient: (patientId: PatientId, doctorId: DoctorId) -> (Result);
  updatePatient: (patientId: PatientId, updatedData: PatientData) ->
   (ApiResult);
}
