# Alertmanager configuration for TrustCareConnect
global:
  smtp_smarthost: '${SMTP_HOST}:${SMTP_PORT}'
  smtp_from: 'alerts@trustcareconnect.com'
  smtp_auth_username: '${SMTP_USER}'
  smtp_auth_password: '${SMTP_PASS}'
  smtp_require_tls: true

# Define notification templates
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Routing tree for alerts
route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h
  receiver: 'default-receiver'
  routes:
    # Critical alerts go immediately
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 0s
      repeat_interval: 1h
      
    # Security alerts
    - match:
        service: security
      receiver: 'security-alerts'
      group_wait: 30s
      repeat_interval: 2h
      
    # AI Proxy specific alerts
    - match:
        service: ai-proxy
      receiver: 'ai-proxy-alerts'
      
    # Frontend alerts
    - match:
        service: frontend
      receiver: 'frontend-alerts'
      
    # Backend alerts
    - match:
        service: icp-backend
      receiver: 'backend-alerts'

# Alert receivers (notification destinations)
receivers:
  - name: 'default-receiver'
    email_configs:
      - to: '${ALERT_EMAIL}'
        subject: 'TrustCareConnect Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Severity: {{ .Labels.severity }}
          Time: {{ .StartsAt }}
          {{ end }}
        headers:
          Subject: 'TrustCareConnect Alert: {{ .GroupLabels.alertname }}'
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#alerts'
        title: 'TrustCareConnect Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Service:* {{ .Labels.service }}
          *Severity:* {{ .Labels.severity }}
          *Time:* {{ .StartsAt }}
          {{ end }}
        
  - name: 'critical-alerts'
    email_configs:
      - to: '${CRITICAL_ALERT_EMAIL}'
        subject: 'üö® CRITICAL: TrustCareConnect Alert'
        body: |
          CRITICAL ALERT - Immediate attention required!
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Time: {{ .StartsAt }}
          
          Please investigate immediately.
          {{ end }}
        headers:
          Subject: 'üö® CRITICAL: TrustCareConnect Alert'
          Priority: 'high'
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#critical-alerts'
        color: 'danger'
        title: 'üö® CRITICAL ALERT: {{ .GroupLabels.alertname }}'
        text: |
          <!channel> CRITICAL ALERT - Immediate attention required!
          
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Service:* {{ .Labels.service }}
          *Time:* {{ .StartsAt }}
          {{ end }}
        
    webhook_configs:
      - url: '${PAGERDUTY_WEBHOOK_URL}'
        send_resolved: true
        
  - name: 'security-alerts'
    email_configs:
      - to: '${SECURITY_ALERT_EMAIL}'
        subject: 'üîí Security Alert: TrustCareConnect'
        body: |
          Security Alert Detected!
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Time: {{ .StartsAt }}
          
          Please review security logs and take appropriate action.
          {{ end }}
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#security'
        color: 'warning'
        title: 'üîí Security Alert: {{ .GroupLabels.alertname }}'
        text: |
          Security alert detected!
          
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Service:* {{ .Labels.service }}
          *Time:* {{ .StartsAt }}
          {{ end }}
        
  - name: 'ai-proxy-alerts'
    email_configs:
      - to: '${TECH_TEAM_EMAIL}'
        subject: 'AI Proxy Alert: {{ .GroupLabels.alertname }}'
        body: |
          AI Proxy Service Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt }}
          
          This may affect AI query processing.
          {{ end }}
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#ai-proxy'
        color: 'warning'
        title: 'ü§ñ AI Proxy Alert: {{ .GroupLabels.alertname }}'
        
  - name: 'frontend-alerts'
    email_configs:
      - to: '${FRONTEND_TEAM_EMAIL}'
        subject: 'Frontend Alert: {{ .GroupLabels.alertname }}'
        body: |
          Frontend Application Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt }}
          
          This may affect user experience.
          {{ end }}
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#frontend'
        color: 'warning'
        title: 'üåü Frontend Alert: {{ .GroupLabels.alertname }}'
        
  - name: 'backend-alerts'
    email_configs:
      - to: '${BACKEND_TEAM_EMAIL}'
        subject: 'Backend Alert: {{ .GroupLabels.alertname }}'
        body: |
          ICP Backend Canister Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt }}
          
          This may affect core application functionality.
          {{ end }}
          
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#backend'
        color: 'warning'
        title: 'üåê Backend Alert: {{ .GroupLabels.alertname }}'

# Inhibition rules (suppress certain alerts when others are firing)
inhibit_rules:
  # Suppress warning alerts when critical alerts are firing for the same service
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service', 'instance']
    
  # Suppress high error rate alerts when service is down
  - source_match:
      alertname: 'ServiceDown'
    target_match:
      alertname: 'HighErrorRate'
    equal: ['service', 'instance']