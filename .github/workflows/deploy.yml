name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy-backend:
    name: Deploy ICP Backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install DFX
        run: |
          wget https://github.com/dfinity/sdk/releases/download/0.15.1/dfx-0.15.1-x86_64-linux.tar.gz
          tar -xzf dfx-0.15.1-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/

      - name: Setup DFX identity
        run: |
          echo "${{ secrets.DFX_IDENTITY }}" | base64 -d > identity.pem
          dfx identity import production identity.pem
          dfx identity use production

      - name: Deploy to IC
        run: |
          cd packages/backend
          dfx deploy --network ic --with-cycles=1000000000000
        env:
          DFX_NETWORK: ic

  deploy-ai-proxy:
    name: Deploy AI Proxy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/ai-proxy && npm ci

      - name: Build AI proxy
        run: npm run build:ai-proxy

      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying AI Proxy to production..."
          # TODO: Configure actual deployment (Docker, PM2, or cloud service)
          # Example: docker build -t ai-proxy . && docker push registry/ai-proxy:latest
          echo "‚ö†Ô∏è  Production deployment requires environment-specific configuration"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          NODE_ENV: production

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/frontend && npm ci

      - name: Build frontend
        run: npm run build:frontend
        env:
          REACT_APP_BACKEND_CANISTER_ID: ${{ secrets.BACKEND_CANISTER_ID }}
          REACT_APP_API_HOST: ${{ secrets.AI_PROXY_HOST }}
          NODE_ENV: production

      - name: Deploy to hosting service
        run: |
          echo "üöÄ Deploying Frontend to hosting service..."
          # TODO: Configure actual deployment (Vercel, Netlify, or ICP hosting)
          # Example: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          echo "‚ö†Ô∏è  Frontend deployment requires hosting service configuration"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-ai-proxy, deploy-frontend]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-ai-proxy.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi