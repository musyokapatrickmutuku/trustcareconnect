name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  DFX_VERSION: '0.15.1'

jobs:
  # Test all components before deployment
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            packages/frontend/package-lock.json
            packages/ai-proxy/package-lock.json
            
      - name: 📥 Install dependencies
        run: |
          cd packages/frontend && npm ci
          cd ../ai-proxy && npm ci
          
      - name: 🧪 Run frontend tests
        run: |
          cd packages/frontend
          npm run test -- --coverage --watchAll=false
          
      - name: 🧪 Run AI proxy tests
        run: |
          cd packages/ai-proxy
          npm test
          
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/frontend/coverage
          flags: frontend
          
  # Deploy backend to Internet Computer
  deploy-backend:
    name: 🌐 Deploy Backend (ICP)
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    outputs:
      canister_id: ${{ steps.deploy.outputs.canister_id }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Install DFX
        run: |
          wget -q https://github.com/dfinity/sdk/releases/download/${{ env.DFX_VERSION }}/dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz
          tar -xzf dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/dfx
          dfx --version
          
      - name: 🔑 Setup DFX identity
        run: |
          echo "${{ secrets.DFX_IDENTITY }}" | base64 -d > identity.pem
          dfx identity import production identity.pem --force
          dfx identity use production
          
      - name: 🚀 Deploy to Internet Computer
        id: deploy
        run: |
          cd packages/backend
          chmod +x deploy-production.sh
          ./deploy-production.sh
          CANISTER_ID=$(dfx canister --network ic id backend)
          echo "canister_id=$CANISTER_ID" >> $GITHUB_OUTPUT
          
      - name: 💾 Save deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-deployment
          path: |
            .env.production
            packages/backend/.dfx/ic/canisters/backend/backend.wasm
            
  # Deploy AI proxy to cloud services
  deploy-ai-proxy:
    name: 🤖 Deploy AI Proxy
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    strategy:
      matrix:
        platform: [railway, render]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/ai-proxy
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            trustcareconnect/ai-proxy:latest
            trustcareconnect/ai-proxy:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🚂 Deploy to Railway
        if: matrix.platform == 'railway'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd packages/ai-proxy
          npm install -g @railway/cli
          railway login --token $RAILWAY_TOKEN
          railway up
          
      - name: 🎨 Deploy to Render
        if: matrix.platform == 'render'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          cd packages/ai-proxy
          # Render deploys automatically via Git integration
          echo "Render deployment triggered via Git push"
          
  # Deploy frontend to hosting services
  deploy-frontend:
    name: 🌟 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test, deploy-backend]
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    strategy:
      matrix:
        platform: [vercel, netlify]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: packages/frontend/package-lock.json
          
      - name: 📥 Install dependencies
        run: |
          cd packages/frontend
          npm ci
          
      - name: ⚙️  Set environment variables
        run: |
          cd packages/frontend
          echo "REACT_APP_BACKEND_CANISTER_ID=${{ needs.deploy-backend.outputs.canister_id }}" >> .env.production
          echo "REACT_APP_ICP_NETWORK=ic" >> .env.production
          echo "REACT_APP_ICP_HOST=https://icp-api.io" >> .env.production
          echo "REACT_APP_API_HOST=https://api.trustcareconnect.com" >> .env.production
          echo "REACT_APP_ENVIRONMENT=production" >> .env.production
          
      - name: 🔨 Build application
        run: |
          cd packages/frontend
          npm run build
          
      - name: ▲ Deploy to Vercel
        if: matrix.platform == 'vercel'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: packages/frontend
          vercel-args: '--prod'
          
      - name: 🌐 Deploy to Netlify
        if: matrix.platform == 'netlify'
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: packages/frontend/build
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          
  # Post-deployment verification
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-ai-proxy, deploy-frontend]
    if: always()
    
    steps:
      - name: 🧪 Test backend canister
        run: |
          CANISTER_ID=${{ needs.deploy-backend.outputs.canister_id }}
          echo "Testing backend canister: $CANISTER_ID"
          curl -f "https://$CANISTER_ID.icp0.io" || echo "Backend health check failed"
          
      - name: 🧪 Test AI proxy
        run: |
          echo "Testing AI proxy endpoints..."
          curl -f "https://api.trustcareconnect.com/api/health" || echo "AI proxy health check failed"
          
      - name: 🧪 Test frontend
        run: |
          echo "Testing frontend applications..."
          curl -f "https://trustcareconnect.com" || echo "Frontend health check failed"
          
      - name: 📊 Deployment summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Canister ID:** ${{ needs.deploy-backend.outputs.canister_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel: https://trustcareconnect.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "- Netlify: https://trustcareconnect.netlify.app" >> $GITHUB_STEP_SUMMARY
          echo "**AI Proxy:** https://api.trustcareconnect.com" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          
  # Notify team about deployment status
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always()
    
    steps:
      - name: 💬 Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.verify-deployment.result }}"
          COLOR="good"
          if [ "$STATUS" != "success" ]; then
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"TrustCareConnect Production Deployment\",
                \"text\": \"Deployment $STATUS\",
                \"fields\": [
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"Author\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Time\", \"value\": \"$(date -u)\", \"short\": true}
                ]
              }]
            }" \
            $SLACK_WEBHOOK_URL