name: 🚧 Deploy to Staging

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DFX_VERSION: '0.15.1'

jobs:
  # Test before staging deployment
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            packages/frontend/package-lock.json
            packages/ai-proxy/package-lock.json
            
      - name: 📥 Install dependencies
        run: |
          cd packages/frontend && npm ci
          cd ../ai-proxy && npm ci
          
      - name: 🧪 Run frontend tests
        run: |
          cd packages/frontend
          npm run test -- --coverage --watchAll=false
          
      - name: 🧪 Run AI proxy tests
        run: |
          cd packages/ai-proxy
          npm test
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/frontend/coverage
          flags: staging
          
  # Deploy backend to staging canister
  deploy-backend-staging:
    name: 🌐 Deploy Backend (Staging)
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    
    outputs:
      canister_id: ${{ steps.deploy.outputs.canister_id }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Install DFX
        run: |
          wget -q https://github.com/dfinity/sdk/releases/download/${{ env.DFX_VERSION }}/dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz
          tar -xzf dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/dfx
          dfx --version
          
      - name: 🔑 Setup DFX staging identity
        run: |
          echo "${{ secrets.DFX_STAGING_IDENTITY }}" | base64 -d > identity.pem
          dfx identity import staging identity.pem --force
          dfx identity use staging
          
      - name: 🚀 Deploy to IC staging
        id: deploy
        run: |
          cd packages/backend
          # Use staging-specific canister if available
          export STAGING_BACKEND_CANISTER_ID="${{ secrets.STAGING_BACKEND_CANISTER_ID }}"
          dfx build --network ic backend
          dfx deploy --network ic backend --with-cycles=1000000000000
          CANISTER_ID=$(dfx canister --network ic id backend)
          echo "canister_id=$CANISTER_ID" >> $GITHUB_OUTPUT
          
  # Deploy AI proxy to staging environment
  deploy-ai-proxy-staging:
    name: 🤖 Deploy AI Proxy (Staging)
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: 🔨 Build and push staging Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/ai-proxy
          platforms: linux/amd64
          push: true
          tags: |
            trustcareconnect/ai-proxy:staging
            trustcareconnect/ai-proxy:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🚂 Deploy to Railway staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        run: |
          cd packages/ai-proxy
          npm install -g @railway/cli
          railway login --token $RAILWAY_TOKEN
          railway environment staging
          railway up
          
  # Deploy frontend to staging
  deploy-frontend-staging:
    name: 🌟 Deploy Frontend (Staging)
    runs-on: ubuntu-latest
    needs: [test, deploy-backend-staging]
    if: needs.test.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: packages/frontend/package-lock.json
          
      - name: 📥 Install dependencies
        run: |
          cd packages/frontend
          npm ci
          
      - name: ⚙️  Set staging environment variables
        run: |
          cd packages/frontend
          echo "REACT_APP_BACKEND_CANISTER_ID=${{ needs.deploy-backend-staging.outputs.canister_id }}" >> .env.staging
          echo "REACT_APP_ICP_NETWORK=ic" >> .env.staging
          echo "REACT_APP_ICP_HOST=https://icp-api.io" >> .env.staging
          echo "REACT_APP_API_HOST=https://staging-api.trustcareconnect.com" >> .env.staging
          echo "REACT_APP_ENVIRONMENT=staging" >> .env.staging
          
      - name: 🔨 Build staging application
        run: |
          cd packages/frontend
          cp .env.staging .env.production
          npm run build
          
      - name: ▲ Deploy to Vercel staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          working-directory: packages/frontend
          vercel-args: '--target staging'
          
      - name: 🌐 Deploy to Netlify staging
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: packages/frontend/build
          production-branch: never
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Staging deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          
  # Run integration tests against staging
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend-staging, deploy-ai-proxy-staging, deploy-frontend-staging]
    if: always() && needs.deploy-backend-staging.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Install E2E dependencies
        run: |
          npm install -g playwright
          npx playwright install
          
      - name: 🧪 Run E2E tests against staging
        env:
          STAGING_BACKEND_CANISTER_ID: ${{ needs.deploy-backend-staging.outputs.canister_id }}
          STAGING_API_URL: https://staging-api.trustcareconnect.com
          STAGING_FRONTEND_URL: https://staging.trustcareconnect.com
        run: |
          cd tests/e2e
          npm install
          npm run test:staging
          
      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/playwright-report/
            
  # Security scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-backend-staging, deploy-ai-proxy-staging]
    if: needs.deploy-backend-staging.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trustcareconnect/ai-proxy:staging'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
  # Performance tests
  performance-tests:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend-staging]
    if: needs.deploy-frontend-staging.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🚀 Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
          
  # Staging deployment summary
  staging-summary:
    name: 📋 Staging Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: always()
    
    steps:
      - name: 📊 Create deployment summary
        run: |
          echo "### 🚧 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Canister ID:** ${{ needs.deploy-backend-staging.outputs.canister_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URLs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: https://staging.trustcareconnect.com" >> $GITHUB_STEP_SUMMARY
          echo "- AI Proxy: https://staging-api.trustcareconnect.com" >> $GITHUB_STEP_SUMMARY
          echo "**Test Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## 🚧 Staging Deployment Complete
            
            Your changes have been deployed to staging and tested!
            
            **🔗 Staging URLs:**
            - Frontend: https://staging.trustcareconnect.com
            - Backend: ${{ needs.deploy-backend-staging.outputs.canister_id }}.icp0.io
            - AI Proxy: https://staging-api.trustcareconnect.com
            
            **✅ Test Results:**
            - Integration Tests: ${{ needs.integration-tests.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Performance Tests: ${{ needs.performance-tests.result }}
            
            Ready for production deployment! 🚀
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });