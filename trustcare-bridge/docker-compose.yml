version: '3.8'

services:
  # TrustCareConnect WebSocket Bridge Service
  trustcare-bridge:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trustcare-bridge
    restart: unless-stopped
    ports:
      - "${WEBSOCKET_PORT:-8080}:8080"  # WebSocket port
      - "${HTTP_PORT:-3001}:3001"      # HTTP API port
    environment:
      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=${TZ:-UTC}

      # Service Ports
      - WEBSOCKET_PORT=8080
      - HTTP_PORT=3001

      # External API Configuration
      - NOVITA_API_KEY=${NOVITA_API_KEY:?NOVITA_API_KEY is required}
      - NOVITA_BASE_URL=${NOVITA_BASE_URL:-https://api.novita.ai/openai/v1}
      - NOVITA_API_RATE_LIMIT=${NOVITA_API_RATE_LIMIT:-10}
      - NOVITA_API_CACHE_TTL=${NOVITA_API_CACHE_TTL:-300}

      # ICP Blockchain Configuration
      - ICP_CANISTER_ID=${ICP_CANISTER_ID:?ICP_CANISTER_ID is required}
      - ICP_HOST=${ICP_HOST:-http://host.docker.internal:4943}
      - ICP_AGENT_HOST=${ICP_AGENT_HOST:-http://host.docker.internal:4943}
      - ICP_FETCH_ROOT_KEY=${ICP_FETCH_ROOT_KEY:-true}

      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required}
      - BRIDGE_SECRET_KEY=${BRIDGE_SECRET_KEY:?BRIDGE_SECRET_KEY is required}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}

      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-trustcare2024}

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-10}

      # WebSocket Configuration
      - WS_HEARTBEAT_INTERVAL=${WS_HEARTBEAT_INTERVAL:-30000}
      - WS_CONNECTION_TIMEOUT=${WS_CONNECTION_TIMEOUT:-60000}
      - MAX_CONCURRENT_CONNECTIONS=${MAX_CONCURRENT_CONNECTIONS:-1000}

      # Health Check Configuration
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
    volumes:
      - bridge-logs:/app/logs
      - bridge-data:/app/data
      - ./config:/app/config:ro
      - ./certs:/app/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trustcare-network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: trustcare-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-trustcare2024}
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-trustcare2024}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-trustcare2024}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - trustcare-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy with SSL and WebSocket Support
  nginx:
    image: nginx:alpine
    container_name: trustcare-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PROXY_PORT:-80}:80"
      - "${HTTPS_PROXY_PORT:-443}:443"
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    depends_on:
      trustcare-bridge:
        condition: service_healthy
    networks:
      - trustcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Monitoring and Logging (Optional - can be disabled for lightweight deployments)
  promtail:
    image: grafana/promtail:latest
    container_name: trustcare-promtail
    restart: unless-stopped
    volumes:
      - bridge-logs:/var/log/bridge:ro
      - nginx-logs:/var/log/nginx:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - trustcare-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

volumes:
  # Persistent data volumes
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  # Log volumes
  bridge-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/bridge

  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

  # Application data
  bridge-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/bridge

  # Nginx cache
  nginx-cache:
    driver: local

networks:
  trustcare-network:
    driver: bridge
    name: trustcare-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.enable_ipv6: "false"
      com.docker.network.driver.mtu: "1500"

# Development override file support
# Create docker-compose.override.yml for local development settings